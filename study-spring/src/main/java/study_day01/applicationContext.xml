<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
            ">
    
    <!-- bean标签的常用属性
    	id:表示这个组件的唯一ID,可以根据这个ID找到这个组件
    	scope:表示这个bean的作用域,常用的作用域如下
    		singleton:将这个bean声明为单例
    		prototype:多例
    		request:这个bean只在一次请求中有效(web项目中)
    		session:这个bean只在一个会话中有效(web项目中)
    		globalsession:全局的会话都有效
    		
    	init-method:
    		指定这个bean的初始化方法,将会在容器创建这个bean的时候执行
    	destroy-method:
    		指定这个bean的销毁方法,将会在spring容器销毁的时候执行
    	factory-method:
    		指定静态工厂的方法名称(这种方式将会使用静态方法工厂方式来创建对象)
     -->
    <bean id="customerDAO" class="study_day01.dao.impl.CustomerDAOImpl"/>
    
    
    <!-- 配置构造方法注入的dao对象 -->
    <bean id="customerService" class="study_day01.service.impl.CustomerServiceImpl">
    	 <!-- 使用constractor-arg标签来为构造方法中的成员变量赋值 -->
    	 <!-- index:指定属性在构造方法参数列表中的索引,从0开始
	    	 	name:在构造方法中参数列表中的名称
	    	 	(name属性与index属性中使用一个就可以了__明显name属性更加直观)
	    	 	type:这个属性在构造方法中的类型(这个属性一般不会使用)
	    	 	value:给简单数据类型赋值(即八种基本数据类型加上字符串)
	    	 	ref:给其他的bean类型赋值
    	  -->
    	<!-- <constructor-arg index="" name=""></constructor-arg>
    	<constructor-arg index="" name=""></constructor-arg> -->
    	
    	<!-- 使用set方法的方式向customerService的实现类中注入CustomerDAO -->
    	<property name="dao"  ref="customerDAO"/>
    		
    	
    </bean>
    
    <bean id="customerAction" class="study_day01.action.CustomerAction">
    	<!-- 使用这种方式来对customerAction中的参数进行注入 -->
    	<constructor-arg name="service" ref="customerService"></constructor-arg>
    </bean>
    
    
    <!-- 如果是使用spring注入集合属性,
    	比如array,list,set,当数据结构一样时,标签可以互换(即可以使用list标签注入set集合中) 
    	亦或是Map和prop由于数据结构一样,所以其标签页是可以互换的
    
    -->
    
    
    
    <!-- 当需要在注入形如List<User>,Map<String,User>这种复合数据类型时,可以参照下面的方法 -->
     <bean id="test_2" class="study_day01.main.Test_2">
     	<!-- 注入List类型的数据 -->
     	<property name="customerList">
     		<list>
     			<bean class="study_day01.entity.Customer">
     				 	<property name="id" value="1"/>
     				 	<property name="name" value="list客户1name"/>
     				 	<property name="sex" value="男"/>
     			</bean>
     			
     			<bean class="study_day01.entity.Customer">
     				 	<property name="id" value="2"/>
     				 	<property name="name" value="list客户2name"/>
     				 	<property name="sex" value="男"/>
     			</bean>
     			
     			<bean class="study_day01.entity.Customer">
     				 	<property name="id" value="3"/>
     				 	<property name="name" value="list客户3name"/>
     				 	<property name="sex" value="男"/>
     			</bean>
     		
     		</list>
     	</property>
     	
     	<!-- 注入map类型的数据 -->
     	<property name="map">
     		<map>
     			<entry key="map客户1">
     				<!-- 
     					然后在这个entry中再定义一个bean
     					吐槽:不得不说这个方法是真的蠢,难道真的有人会用?虽然也只能这样实现了
     				 -->
     				 <bean class="study_day01.entity.Customer">
     				 	<property name="id" value="1"/>
     				 	<property name="name" value="map客户1name"/>
     				 	<property name="sex" value="男"/>
     				 </bean>
     			</entry>
     			
     			<!-- 还能定义另外一个entry -->
     			<entry key="map客户2">
					  <bean class="study_day01.entity.Customer">
     				 	<property name="id" value="2"/>
     				 	<property name="name" value="map客户2name"/>
     				 	<property name="sex" value="女"/>
     				 </bean>   			
     			</entry>
     			
     			<!-- 难道真的还会有人定义第三个bean??? -->
     			<entry key="map客户3">
					  <bean class="study_day01.entity.Customer">
     				 	<property name="id" value="3"/>
     				 	<property name="name" value="map客户3name"/>
     				 	<property name="sex" value="男"/>
     				 </bean>   			
     			</entry>
     			<!-- 理论上是无限定义的? -->
     		</map>
     	</property>
     
     </bean>
</beans>